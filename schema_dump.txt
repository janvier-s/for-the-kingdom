// export-src-to-json.js
import { promises as fs } from 'fs'
import path from 'path'
import { fileURLToPath } from 'url'

// Get current file and directory (needed in ESM)
const __filename = fileURLToPath(import.meta.url)
const __dirname = path.dirname(__filename)

// Update this to your actual source folder
const SRC_DIR = '/Users/Janvier/Development/for-the-kingdom/kingdom-deliverance/src'
const OUTPUT_FILE = path.join(__dirname, 'src_export.json')

async function walkDir(dir) {
  const result = {}
  const entries = await fs.readdir(dir, { withFileTypes: true })

  for (const entry of entries) {
    // --- Add this check to skip dotfiles/dotdirectories ---
    if (entry.name.startsWith('.')) {
      // console.log(`Skipping dot entry: ${path.join(dir, entry.name)}`); // Optional: Log skipped files
      continue // Move to the next entry in the directory
    }
    // --- End of added check ---

    const fullPath = path.join(dir, entry.name)
    if (entry.isDirectory()) {
      result[entry.name] = await walkDir(fullPath) // Recursively process subdirectories
    } else if (entry.isFile()) {
      try {
        result[entry.name] = await fs.readFile(fullPath, 'utf-8') // Read file content
      } catch (readErr) {
        // Handle potential read errors (e.g., permission issues) gracefully
        console.warn(`‚ö†Ô∏è  Could not read file: ${fullPath} - ${readErr.message}`)
        result[entry.name] = `[Error reading file: ${readErr.message}]` // Add error marker to JSON
      }
    }
    // Note: Other entry types like symbolic links are ignored by this logic
  }

  return result
}

try {
  console.log(`üîç Walking directory: ${SRC_DIR}`)
  const exportData = await walkDir(SRC_DIR)
  console.log(`üìù Writing export data to: ${OUTPUT_FILE}`)
  await fs.writeFile(OUTPUT_FILE, JSON.stringify(exportData, null, 2), 'utf-8')
  console.log(`‚úÖ Exported successfully to ${OUTPUT_FILE}`)
} catch (err) {
  console.error('‚ùå Error during export process:', err)
}

// Removed the trailing '√ü;' which looked like a typo
