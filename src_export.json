{
  "App.vue": "<script setup>\nimport { onMounted, ref } from 'vue'\n\nconst isDarkMode = ref(false)\n\nconst toggleDarkMode = () => {\n  isDarkMode.value = !isDarkMode.value\n  const rootEl = document.documentElement\n  if (isDarkMode.value) {\n    rootEl.classList.add('dark')\n    localStorage.setItem('theme', 'dark')\n    console.log('Switched to Dark Mode')\n  } else {\n    rootEl.classList.remove('dark')\n    localStorage.setItem('theme', 'light')\n    console.log('Switched to Light Mode')\n  }\n}\n\nonMounted(() => {\n  const rootEl = document.documentElement\n  const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches\n  const savedTheme = localStorage.getItem('theme')\n  console.log('Initial check - prefersDark:', prefersDark, 'savedTheme:', savedTheme)\n\n  if (savedTheme === 'dark' || (!savedTheme && prefersDark)) {\n    isDarkMode.value = true\n    rootEl.classList.add('dark')\n    console.log('Setting initial theme to Dark')\n  } else {\n    isDarkMode.value = false\n    rootEl.classList.remove('dark')\n    console.log('Setting initial theme to Light')\n  }\n})\n</script>\n\n<template>\n  <div id=\"app-wrapper\">\n    <header class=\"app-header\">\n      <button @click=\"toggleDarkMode\" class=\"theme-toggle\">\n        {{ isDarkMode ? '‚òÄÔ∏è Light Mode' : 'üåô Dark Mode' }}\n      </button>\n    </header>\n\n    <main>\n      <router-view />\n    </main>\n  </div>\n</template>\n\n<style scoped>\n#app-wrapper {\n  display: flex;\n  flex-direction: column;\n  min-height: 100vh;\n}\n\n.app-header {\n  padding: 10px 20px;\n  background-color: var(--bg-secondary);\n  border-bottom: 1px solid var(--border-divider);\n  display: flex;\n  justify-content: flex-end;\n  align-items: center;\n}\n\n.theme-toggle {\n  padding: 8px 15px;\n  border: 1px solid var(--border-primary);\n  background-color: var(--bg-primary);\n  color: var(--text-primary);\n  border-radius: var(--radius-md);\n  cursor: pointer;\n  font-size: 0.9rem;\n  transition: all var(--transition-std);\n}\n\n.theme-toggle:hover {\n  background-color: var(--bg-secondary);\n  border-color: var(--border-hover);\n}\n\nmain {\n  flex-grow: 1;\n  padding: 20px;\n}\n</style>\n",
  "api": {},
  "assets": {
    "main.css": ":root {\n  --bg-primary: #ffffff;\n  --bg-secondary: #f8fafd;\n  --bg-tertiary: #f8f9fa;\n  --text-primary: #2c3e50;\n  --text-secondary: #6c757d;\n  --text-heading: #34495e;\n  --text-link: #007bff;\n  --text-link-hover: #0056b3;\n  --border-primary: #dce4ec;\n  --border-secondary: #e1e8ed;\n  --border-hover: #cdddeb;\n  --border-divider: #eee;\n  --error-bg: #f2dede;\n  --error-text: #a94442;\n  --error-border: #ebccd1;\n  --shadow-color-light: rgba(0, 0, 0, 0.04);\n  --shadow-color-medium: rgba(0, 0, 0, 0.08);\n\n  --spacing-xs: 5px;\n  --spacing-sm: 10px;\n  --spacing-md: 15px;\n  --spacing-lg: 20px;\n  --spacing-xl: 30px;\n  --radius-sm: 4px;\n  --radius-md: 6px;\n  --radius-lg: 8px;\n\n  --transition-fast: 0.15s ease-in-out;\n  --transition-std: 0.2s ease-in-out;\n}\n\nhtml.dark {\n  --bg-primary: #1a1d21;\n  --bg-secondary: #2c313a;\n  --bg-tertiary: #252930;\n  --text-primary: #e0e6f1;\n  --text-secondary: #adb5bd;\n  --text-heading: #cbd2e0;\n  --text-link: #60a5fa;\n  --text-link-hover: #93c5fd;\n  --border-primary: #404756;\n  --border-secondary: #4a5263;\n  --border-hover: #60a5fa;\n  --border-divider: #3b4252;\n  --error-bg: #4d1a1a;\n  --error-text: #ffcccc;\n  --error-border: #6e2a2a;\n  --shadow-color-light: rgba(0, 0, 0, 0.2);\n  --shadow-color-medium: rgba(0, 0, 0, 0.4);\n}\n\n*,\n*::before,\n*::after {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\nhtml {\n  font-size: 16px;\n}\n\nbody {\n  font-family:\n    -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif,\n    'Apple Color Emoji', 'Segoe UI Emoji';\n  background-color: var(--bg-primary);\n  color: var(--text-primary);\n  line-height: 1.6;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  transition:\n    background-color var(--transition-std),\n    color var(--transition-std);\n}\n\na {\n  color: var(--text-link);\n  text-decoration: none;\n  transition: color var(--transition-fast);\n}\n\na:hover {\n  color: var(--text-link-hover);\n  text-decoration: underline;\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n  color: var(--text-heading);\n  margin-bottom: var(--spacing-md);\n  line-height: 1.3;\n  font-weight: 600;\n}\n\nh1 {\n  font-size: 2rem;\n  text-align: center;\n  height: 50px;\n}\nh2 {\n  font-size: 1.5rem;\n}\nh3 {\n  font-size: 1.25rem;\n}\n\np {\n  margin-bottom: var(--spacing-md);\n}\n\n.container {\n  max-width: 900px;\n  margin-left: auto;\n  margin-right: auto;\n  padding-left: var(--spacing-lg);\n  padding-right: var(--spacing-lg);\n}\n\n.loading-text {\n  text-align: center;\n  color: var(--text-secondary);\n  margin: var(--spacing-xl) 0;\n  padding: var(--spacing-sm);\n  font-style: italic;\n  background-color: var(--bg-tertiary);\n  border-radius: var(--radius-sm);\n}\n\n.error-box {\n  color: var(--error-text);\n  background-color: var(--error-bg);\n  border: 1px solid var(--error-border);\n  padding: var(--spacing-md);\n  border-radius: var(--radius-sm);\n  margin: var(--spacing-lg) 0;\n  text-align: center;\n}\n\n.card {\n  border: 1px solid var(--border-primary);\n  padding: var(--spacing-lg);\n  border-radius: var(--radius-lg);\n  background-color: var(--bg-secondary);\n  box-shadow: 0 2px 4px var(--shadow-color-light);\n  transition:\n    box-shadow var(--transition-std),\n    transform var(--transition-std);\n}\n\n.card:hover {\n  box-shadow: 0 6px 12px var(--shadow-color-medium);\n  transform: translateY(-2px);\n}\n\n.list-item-link {\n  display: block;\n  text-decoration: none;\n  color: var(--text-primary);\n  background-color: var(--bg-primary);\n  border: 1px solid var(--border-secondary);\n  padding: var(--spacing-sm) var(--spacing-md);\n  margin-bottom: var(--spacing-sm);\n  border-radius: var(--radius-md);\n  transition:\n    background-color var(--transition-std),\n    border-color var(--transition-std),\n    transform var(--transition-fast),\n    box-shadow var(--transition-std);\n  box-shadow: 0 1px 3px var(--shadow-color-light);\n}\n\n.list-item-link:hover,\n.list-item-link:focus {\n  background-color: #252730;\n  transform: translateY(-1px);\n  box-shadow: 0 4px 8px var(--shadow-color-medium);\n  outline: none;\n}\n\n.list-item-link:last-child {\n  margin-bottom: 0;\n}\n\n.divider {\n  border: 0;\n  height: 1px;\n  background-color: var(--border-divider);\n  margin: var(--spacing-lg) 0;\n}\n\n.view-header {\n  margin-bottom: var(--spacing-lg);\n  padding-bottom: var(--spacing-sm);\n  border-bottom: 1px solid var(--border-divider);\n}\n.view-header h1,\n.view-header h2 {\n  margin-bottom: 0;\n}\n"
  },
  "components": {
    "TestamentTypeList.vue": "<template>\n  <div class=\"testament-type-list\">\n    <p v-if=\"isLoading\" class=\"loading-text\">Loading types...</p>\n    <p v-else-if=\"error\" class=\"error-box\">Error loading types: {{ error }}</p>\n    <div v-else-if=\"types.length > 0\">\n      <router-link\n        v-for=\"type in types\"\n        :key=\"type.type_id\"\n        :to=\"{\n          name: 'type-detail-by-slug',\n          params: { testamentSlug: props.testamentSlug, typeSlug: type.slug },\n        }\"\n        class=\"type-link list-item-link\"\n      >\n        {{ type.name }}\n      </router-link>\n    </div>\n    <p v-else style=\"text-align: center; color: var(--text-secondary)\">\n      No specific book types found listed under this testament.\n    </p>\n  </div>\n</template>\n\n<script setup>\nimport { ref, watch, defineProps } from 'vue'\nimport supabase from '../supabase'\n\nconst props = defineProps({\n  testamentId: {\n    type: Number,\n    required: true,\n  },\n  testamentSlug: {\n    type: String,\n    required: true,\n  },\n})\n\nconst types = ref([])\nconst isLoading = ref(true)\nconst error = ref(null)\nconst frenchLangId = ref(null)\n\nconst getLanguageId = async (langName) => {\n  if (frenchLangId.value) return frenchLangId.value\n  try {\n    const { data, error: langError } = await supabase\n      .from('languages')\n      .select('lang_id')\n      .eq('lang', langName)\n      .single()\n    if (langError) throw langError\n    if (!data) throw new Error(`Language '${langName}' not found.`)\n    frenchLangId.value = data.lang_id\n    return data.lang_id\n  } catch (err) {\n    console.error(`Error fetching language ID for ${langName}:`, err)\n    throw new Error(`Failed to find language ID for ${langName}. ${err.message}`)\n  }\n}\n\nconst fetchTypesForTestament = async (testamentId) => {\n  if (typeof testamentId !== 'number' || isNaN(testamentId)) {\n    error.value = `Invalid Testament ID received: ${testamentId}`\n    isLoading.value = false\n    console.error(error.value)\n    types.value = []\n    return\n  }\n\n  isLoading.value = true\n  error.value = null\n  types.value = []\n\n  try {\n    const langId = await getLanguageId('Fran√ßais')\n\n    const { data: bookTypeData, error: bookTypeError } = await supabase\n      .from('books')\n      .select('type_id')\n      .eq('testament_id', testamentId)\n      .not('type_id', 'is', null)\n\n    if (bookTypeError) throw bookTypeError\n\n    const distinctTypeIds = [\n      ...new Set(bookTypeData.map((item) => item.type_id).filter((id) => id !== null)),\n    ]\n\n    if (distinctTypeIds.length === 0) {\n      isLoading.value = false\n      return\n    }\n\n    const { data: typeTranslationsData, error: translationError } = await supabase\n      .from('type_translations')\n      .select('name, slug, type_id')\n      .in('type_id', distinctTypeIds)\n      .eq('lang_id', langId)\n      .order('type_id', { ascending: true })\n\n    if (translationError) throw translationError\n\n    types.value = typeTranslationsData || []\n  } catch (err) {\n    console.error('Error fetching types for testament:', err)\n    error.value = err.message || `Failed to fetch types for Testament ID ${testamentId}`\n    types.value = []\n  } finally {\n    isLoading.value = false\n  }\n}\n\nwatch(\n  () => props.testamentId,\n  (newId) => {\n    fetchTypesForTestament(newId)\n  },\n  { immediate: true },\n)\n</script>\n\n<style scoped>\n.testament-type-list {\n  padding-top: 1rem;\n}\n.type-link {\n  display: block;\n  padding: 0.75rem 1rem;\n  margin-bottom: 0.5rem;\n  border: 1px solid var(--border-color);\n  border-radius: var(--border-radius-small);\n  text-decoration: none;\n  color: var(--text-primary);\n  background-color: var(--card-bg);\n  transition: background-color 0.2s ease;\n}\n.type-link:hover {\n  background-color: var(--hover-bg);\n}\n.loading-text,\n.error-box {\n  text-align: center;\n  padding: 1rem;\n}\n.error-box {\n  color: var(--error-color);\n  background-color: var(--error-bg-light); /* Assuming a light error bg */\n  border: 1px solid var(--error-color);\n  border-radius: var(--border-radius-small);\n}\n</style>\n",
    "TypeDetail.vue": "<template>\n  <div class=\"type-detail\">\n    <div v-if=\"isLoadingType\">Loading type details...</div>\n    <div v-else-if=\"typeError\" class=\"error-message\">Error loading type: {{ typeError }}</div>\n    <header v-else-if=\"typeName\">\n      <h2>{{ typeName }}</h2>\n    </header>\n    <div v-else>\n      <p class=\"error-message\">Type details could not be loaded.</p>\n    </div>\n\n    <div v-if=\"actualTypeId && !isLoadingType && !typeError\">\n      <div v-if=\"isLoadingBooks\" class=\"loading\">Loading books...</div>\n      <div v-else-if=\"booksError\" class=\"error-message\">Error loading books: {{ booksError }}</div>\n      <ul v-else-if=\"books.length > 0\" class=\"book-list\">\n        <li v-for=\"book in books\" :key=\"book.book_id\">\n          <router-link\n            :to=\"{\n              name: 'book-detail-by-slug',\n              params: {\n                testamentSlug: props.testamentSlug,\n                typeSlug: props.typeSlug,\n                bookSlug: book.slug,\n              },\n            }\"\n          >\n            {{ book.title }}\n          </router-link>\n        </li>\n      </ul>\n      <p v-else>No books found for this type in the selected language.</p>\n    </div>\n  </div>\n</template>\n\n<script setup>\nimport { defineProps, ref, watch } from 'vue'\nimport supabase from '../supabase'\n\nconst props = defineProps({\n  testamentSlug: { type: String, required: false },\n  typeSlug: { type: String, required: true },\n})\n\nconst typeName = ref('')\nconst actualTypeId = ref(null)\nconst books = ref([])\nconst frenchLangId = ref(null)\n\nconst isLoadingType = ref(true)\nconst typeError = ref(null)\nconst isLoadingBooks = ref(false)\nconst booksError = ref(null)\n\nconst getLanguageId = async (langName) => {\n  if (frenchLangId.value) return frenchLangId.value\n  try {\n    const { data, error: langError } = await supabase\n      .from('languages')\n      .select('lang_id')\n      .eq('lang', langName)\n      .single()\n    if (langError) throw langError\n    if (!data) throw new Error(`Language '${langName}' not found.`)\n    frenchLangId.value = data.lang_id\n    return data.lang_id\n  } catch (err) {\n    console.error(`Error fetching language ID for ${langName}:`, err)\n    throw new Error(`Failed to find language ID for ${langName}. ${err.message}`)\n  }\n}\n\nconst fetchTypeDetails = async (slug, langId) => {\n  if (!slug || !langId) {\n    throw new Error('Slug or Language ID missing for fetching type details.')\n  }\n\n  const { data, error: fetchError } = await supabase\n    .from('type_translations')\n    .select('name, type_id')\n    .eq('slug', slug)\n    .eq('lang_id', langId)\n    .single()\n\n  if (fetchError) {\n    if (fetchError.code === 'PGRST116') {\n      throw new Error(`Type with slug '${slug}' not found for the selected language.`)\n    } else {\n      throw fetchError\n    }\n  }\n  if (!data) throw new Error(`Type with slug '${slug}' not found.`)\n\n  typeName.value = data.name\n  actualTypeId.value = data.type_id\n}\n\nconst fetchBooksForType = async (typeId, langId) => {\n  if (!typeId || !langId) {\n    booksError.value = 'Cannot fetch books without a valid Type ID or Language ID.'\n    return\n  }\n  isLoadingBooks.value = true\n  booksError.value = null\n  books.value = []\n\n  try {\n    const { data, error: fetchError } = await supabase\n      .from('books')\n      .select(\n        `\n            book_id,\n            bible_order,\n            book_translations!inner (\n                title,\n                abbr,\n                slug\n            )\n        `,\n      )\n      .eq('type_id', typeId)\n      .eq('book_translations.lang_id', langId)\n      .order('bible_order', { ascending: true })\n\n    if (fetchError) throw fetchError\n\n    books.value = (data || [])\n      .map((book) => ({\n        book_id: book.book_id,\n        bible_order: book.bible_order,\n        title: book.book_translations[0]?.title || 'Unknown Title',\n        abbr: book.book_translations[0]?.abbr || 'N/A',\n        slug: book.book_translations[0]?.slug || `book-${book.book_id}`,\n      }))\n      .filter((book) => book.book_translations !== null)\n  } catch (err) {\n    console.error('Error fetching books for type:', err)\n    booksError.value = err.message || 'Failed to fetch books'\n  } finally {\n    isLoadingBooks.value = false\n  }\n}\n\nconst loadDataForType = async (slug) => {\n  isLoadingType.value = true\n  isLoadingBooks.value = true\n  typeError.value = null\n  booksError.value = null\n  typeName.value = ''\n  actualTypeId.value = null\n  books.value = []\n\n  try {\n    const langId = await getLanguageId('Fran√ßais')\n\n    await fetchTypeDetails(slug, langId)\n\n    if (actualTypeId.value) {\n      await fetchBooksForType(actualTypeId.value, langId)\n    } else {\n      isLoadingBooks.value = false\n    }\n  } catch (err) {\n    console.error('Error loading data for type:', err)\n    typeError.value = err.message || 'Failed to load type or book data.'\n    isLoadingBooks.value = false\n  } finally {\n    isLoadingType.value = false\n  }\n}\n\nwatch(\n  () => props.typeSlug,\n  (newSlug) => {\n    if (newSlug) {\n      loadDataForType(newSlug)\n    } else {\n      typeError.value = 'Invalid Type identifier provided.'\n      isLoadingType.value = false\n      isLoadingBooks.value = false\n    }\n  },\n  { immediate: true },\n)\n</script>\n\n<style scoped>\n.type-detail {\n  padding: 1rem;\n}\nheader {\n  margin-bottom: 1.5rem;\n  padding-bottom: 1rem;\n  border-bottom: 1px solid var(--border-color);\n}\nheader h2 {\n  color: var(--primary-color);\n  text-align: center;\n}\n.book-list {\n  list-style: none;\n  padding: 0;\n  margin-top: 1rem;\n}\n.book-list li {\n  margin-bottom: 0.5rem;\n}\n.book-list a {\n  text-decoration: none;\n  color: var(--link-color);\n}\n.book-list a:hover {\n  text-decoration: underline;\n}\n.loading,\n.error-message {\n  text-align: center;\n  padding: 1rem;\n  margin-top: 1rem;\n}\n.error-message {\n  color: var(--error-color);\n}\n</style>\n"
  },
  "main.js": "import { createApp } from 'vue'\nimport { createPinia } from 'pinia'\n\nimport App from './App.vue'\nimport router from './router'\nimport './assets/main.css' //\nimport { useSupabaseStore } from './stores/supabase'\n\nconst app = createApp(App)\nconst pinia = createPinia()\n\napp.use(pinia)\napp.use(router)\n\nconst supabaseStore = useSupabaseStore(pinia)\nsupabaseStore\n  .init()\n  .then(() => {\n    app.mount('#app')\n  })\n  .catch((error) => {\n    console.error('Failed to initialize Supabase:', error)\n    app.mount('#app')\n  })\n",
  "router": {
    "index.js": "import { createRouter, createWebHistory } from 'vue-router'\nimport HomeView from '../views/HomeView.vue'\nimport TestamentView from '../views/TestamentView.vue'\nimport BookDetail from '../views/BookDetail.vue'\nimport supabase from '../supabase'\n\nconst getLanguageId = async (langName = 'Fran√ßais') => {\n  if (!getLanguageId.cache) {\n    getLanguageId.cache = {}\n  }\n  if (getLanguageId.cache[langName]) {\n    return getLanguageId.cache[langName]\n  }\n\n  try {\n    const { data, error } = await supabase\n      .from('languages')\n      .select('lang_id')\n      .eq('lang', langName)\n      .single()\n\n    if (error) throw error\n    if (!data) throw new Error(`Language '${langName}' not found.`)\n\n    getLanguageId.cache[langName] = data.lang_id\n    return data.lang_id\n  } catch (err) {\n    console.error(`Router Helper Error: Failed to get language ID for ${langName}`, err)\n    throw new Error(`Language setup error: ${err.message}`)\n  }\n}\n\nconst router = createRouter({\n  history: createWebHistory(import.meta.env.BASE_URL),\n  routes: [\n    {\n      path: '/',\n      name: 'home',\n      component: HomeView,\n    },\n    {\n      path: '/:testamentSlug',\n      name: 'testament-detail',\n      component: TestamentView,\n      props: true,\n      beforeEnter: async (to, from, next) => {\n        const slug = to.params.testamentSlug\n        console.log(`Route Guard: Finding testament ID for slug: ${slug}`)\n        try {\n          const langId = await getLanguageId('Fran√ßais')\n\n          const { data, error } = await supabase\n            .from('testament_translations')\n            .select('testament_id')\n            .eq('slug', slug)\n            .eq('lang_id', langId)\n            .single()\n\n          if (error) {\n            if (error.code === 'PGRST116') {\n              console.warn(\n                `Route Guard: No testament translation found for slug: ${slug} and langId: ${langId}`,\n              )\n              return next(\n                new Error(`Testament with slug '${slug}' not found for the selected language.`),\n              )\n            }\n            throw error\n          }\n\n          if (data && data.testament_id) {\n            console.log(`Route Guard: Found Testament ID: ${data.testament_id}`)\n            to.params.testamentId = data.testament_id\n            next()\n          } else {\n            console.warn(`Route Guard: No testament data/ID found for slug: ${slug}`)\n            next(new Error(`Testament with slug '${slug}' not found.`))\n          }\n        } catch (err) {\n          console.error('Error in testament route guard:', err)\n          next(new Error(`Error finding testament: ${err.message}`))\n        }\n      },\n    },\n    {\n      path: '/:testamentSlug/:typeSlug',\n      name: 'type-detail-by-slug',\n      component: () => import('../components/TypeDetail.vue'),\n      props: true,\n    },\n    {\n      path: '/:testamentSlug/:typeSlug/:bookSlug',\n      name: 'book-detail-by-slug',\n      component: BookDetail,\n      props: true,\n    },\n    // {\n    //   path: '/:pathMatch(.*)*',\n    //   name: 'NotFound',\n    //   component: () => import('../views/NotFoundView.vue'),\n    // },\n  ],\n})\n\nexport default router\n"
  },
  "stores": {
    "supabase.js": "import { defineStore } from 'pinia'\nimport { ref, computed } from 'vue'\nimport supabase from '../supabase'\n\nexport const useSupabaseStore = defineStore('supabase', () => {\n  const user = ref(null)\n  const isLoading = ref(false)\n  const error = ref(null)\n  const session = ref(null)\n\n  const isLoggedIn = computed(() => !!user.value)\n\n  function setError(errorMessage) {\n    error.value = errorMessage\n    setTimeout(() => {\n      error.value = null\n    }, 5000)\n  }\n\n  async function init() {\n    isLoading.value = true\n\n    try {\n      const { data, error: sessionError } = await supabase.auth.getSession()\n      if (sessionError) {\n        console.error('Error getting session:', sessionError)\n        throw sessionError\n      }\n      session.value = data.session\n\n      if (data.session) {\n        user.value = data.session.user\n      }\n\n      supabase.auth.onAuthStateChange((event, newSession) => {\n        session.value = newSession\n        user.value = newSession?.user || null\n      })\n    } catch (err) {\n      setError(err.message || 'Failed to initialize authentication')\n      console.error('Auth initialization error:', err)\n    } finally {\n      isLoading.value = false\n    }\n  }\n\n  async function signInWithEmail(email, password) {\n    isLoading.value = true\n    error.value = null\n\n    try {\n      const { data, error: authError } = await supabase.auth.signInWithPassword({\n        email,\n        password,\n      })\n\n      if (authError) {\n        console.error('Sign-in error:', authError)\n        throw authError\n      }\n\n      user.value = data.user\n      session.value = data.session\n      return { success: true, data }\n    } catch (err) {\n      setError(err.message || 'Failed to sign in')\n      console.error('Sign in error:', err)\n      return { success: false, error: err }\n    } finally {\n      isLoading.value = false\n    }\n  }\n\n  async function signUpWithEmail(email, password) {\n    isLoading.value = true\n    error.value = null\n\n    try {\n      const { data, error: authError } = await supabase.auth.signUp({\n        email,\n        password,\n      })\n\n      if (authError) {\n        console.error('Sign-up error:', authError)\n        throw authError\n      }\n\n      return { success: true, data }\n    } catch (err) {\n      setError(err.message || 'Failed to sign up')\n      console.error('Sign up error:', err)\n      return { success: false, error: err }\n    } finally {\n      isLoading.value = false\n    }\n  }\n\n  async function signOut() {\n    isLoading.value = true\n    error.value = null\n\n    try {\n      const { error: authError } = await supabase.auth.signOut()\n\n      if (authError) {\n        console.error('Sign-out error:', authError)\n        throw authError\n      }\n\n      user.value = null\n      session.value = null\n      return { success: true }\n    } catch (err) {\n      setError(err.message || 'Failed to sign out')\n      console.error('Sign out error:', err)\n      return { success: false, error: err }\n    } finally {\n      isLoading.value = false\n    }\n  }\n\n  function getCurrentUser() {\n    return user.value\n  }\n\n  return {\n    user,\n    isLoading,\n    error,\n    session,\n    isLoggedIn,\n    init,\n    signInWithEmail,\n    signUpWithEmail,\n    signOut,\n    getCurrentUser,\n  }\n})\n"
  },
  "supabase.js": "import { createClient } from '@supabase/supabase-js'\n\nconst supabaseUrl = import.meta.env.VITE_SUPABASE_URL\nconst supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY\n\nif (!supabaseUrl || !supabaseAnonKey) {\n  console.error(\n    'Supabase environment variables are missing. Make sure VITE_SUPABASE_URL and VITE_SUPABASE_ANON_KEY are set in your .env file.',\n  )\n  throw new Error('Supabase configuration is incomplete')\n}\n\nconst supabase = createClient(supabaseUrl, supabaseAnonKey)\n\nexport default supabase\n",
  "views": {
    "BookDetail.vue": "<template>\n  <div class=\"book-detail\">\n    <header v-if=\"isLoadingBook\">Loading book details...</header>\n    <header v-else-if=\"bookError\" class=\"error-message\">Error loading book: {{ bookError }}</header>\n    <header v-else-if=\"bookTitle\">\n      <h1>{{ bookTitle }}</h1>\n      <div v-if=\"availableVersions.length > 1\" class=\"version-selector\">\n        <label for=\"versionSelect\">Version: </label>\n        <select id=\"versionSelect\" v-model=\"selectedVersionId\" @change=\"handleVersionChange\">\n          <option\n            v-for=\"version in availableVersions\"\n            :key=\"version.version_id\"\n            :value=\"version.version_id\"\n          >\n            {{ version.abbr }} ({{ version.full_name }})\n          </option>\n        </select>\n      </div>\n      <div v-else-if=\"availableVersions.length === 1\">\n        <p>Version: {{ availableVersions[0].abbr }}</p>\n      </div>\n    </header>\n    <header v-else>\n      <h1 class=\"error-message\">Book not found.</h1>\n    </header>\n\n    <main v-if=\"actualBookId\">\n      <div v-if=\"chapters.length > 1\" class=\"chapter-nav\">\n        <button @click=\"changeChapter(-1)\" :disabled=\"selectedChapterNumber <= 1\">&lt; Prev</button>\n        <span>Chapter {{ selectedChapterNumber }} of {{ chapters.length }}</span>\n        <button @click=\"changeChapter(1)\" :disabled=\"selectedChapterNumber >= chapters.length\">\n          Next >\n        </button>\n      </div>\n      <h2 v-else-if=\"chapters.length === 1\">Chapter {{ selectedChapterNumber }}</h2>\n\n      <div v-if=\"isLoadingContent\" class=\"loading\">Loading content...</div>\n      <div v-else-if=\"contentError\" class=\"error-message\">\n        Error loading content: {{ contentError }}\n      </div>\n      <div v-else-if=\"verses.length > 0\">\n        <div class=\"verses-container\">\n          <p v-for=\"verse in verses\" :key=\"verse.verse_id\" class=\"verse\">\n            <sup>{{ verse.verse_number }}</sup> {{ verse.verse_text }}\n          </p>\n        </div>\n      </div>\n      <p v-else>No verses found for Chapter {{ selectedChapterNumber }} in the selected version.</p>\n    </main>\n    <div v-else-if=\"!isLoadingBook && !bookError\">\n      <p>Could not determine book details to load content.</p>\n    </div>\n  </div>\n</template>\n\n<script setup>\nimport { ref, watch, defineProps } from 'vue'\nimport supabase from '../supabase'\n\nconst props = defineProps({\n  bookSlug: {\n    type: String,\n    required: true,\n  },\n  testamentSlug: { type: String, required: false },\n  typeSlug: { type: String, required: false },\n})\n\nconst bookTitle = ref('')\nconst actualBookId = ref(null)\nconst chapters = ref([])\nconst verses = ref([])\nconst selectedChapterId = ref(null)\nconst selectedChapterNumber = ref(1)\nconst availableVersions = ref([])\nconst selectedVersionId = ref(null)\nconst frenchLangId = ref(null)\n\nconst isLoadingBook = ref(true)\nconst bookError = ref(null)\nconst isLoadingContent = ref(false)\nconst contentError = ref(null)\n\nconst getLanguageId = async (langName) => {\n  if (frenchLangId.value) return frenchLangId.value\n  try {\n    const { data, error: langError } = await supabase\n      .from('languages')\n      .select('lang_id')\n      .eq('lang', langName)\n      .single()\n    if (langError) throw langError\n    if (!data) throw new Error(`Language '${langName}' not found.`)\n    frenchLangId.value = data.lang_id\n    return data.lang_id\n  } catch (err) {\n    console.error(`Error fetching language ID for ${langName}:`, err)\n    throw new Error(`Failed to find language ID for ${langName}. ${err.message}`)\n  }\n}\n\nconst getAvailableVersions = async (langId) => {\n  if (!langId) return []\n  try {\n    const { data, error } = await supabase\n      .from('versions')\n      .select('version_id, abbr, full_name')\n      .eq('lang_id', langId)\n      .order('abbr')\n    if (error) throw error\n    return data || []\n  } catch (err) {\n    console.error('Error fetching available versions:', err)\n    contentError.value = contentError.value\n      ? `${contentError.value} | Failed to load versions.`\n      : 'Failed to load versions.'\n    return []\n  }\n}\n\nconst fetchBookDetailsAndInitialContent = async (slug) => {\n  isLoadingBook.value = true\n  isLoadingContent.value = true\n  bookError.value = null\n  contentError.value = null\n  bookTitle.value = ''\n  actualBookId.value = null\n  chapters.value = []\n  verses.value = []\n  selectedChapterId.value = null\n  selectedChapterNumber.value = 1\n  availableVersions.value = []\n  selectedVersionId.value = null\n\n  try {\n    const langId = await getLanguageId('Fran√ßais')\n    const versionsPromise = getAvailableVersions(langId)\n\n    const { data: bookTransData, error: bookFetchError } = await supabase\n      .from('book_translations')\n      .select('title, book_id')\n      .eq('slug', slug)\n      .eq('lang_id', langId)\n      .single()\n\n    if (bookFetchError) {\n      if (bookFetchError.code === 'PGRST116') {\n        throw new Error(`Book '${slug}' not found.`)\n      }\n      throw bookFetchError\n    }\n    if (!bookTransData) throw new Error(`Book '${slug}' not found.`)\n\n    bookTitle.value = bookTransData.title\n    actualBookId.value = bookTransData.book_id\n\n    availableVersions.value = await versionsPromise\n    const defaultVersion =\n      availableVersions.value.find((v) => v.abbr === 'LSG') || availableVersions.value[0]\n    if (defaultVersion) {\n      selectedVersionId.value = defaultVersion.version_id\n    } else {\n      contentError.value = 'No Bible version found.'\n      isLoadingContent.value = false\n      isLoadingBook.value = false\n      return\n    }\n\n    await fetchChapters(actualBookId.value)\n\n    if (selectedChapterId.value && selectedVersionId.value) {\n      await fetchVerses(selectedChapterId.value, selectedVersionId.value)\n    } else if (chapters.value.length === 0) {\n      contentError.value = contentError.value\n        ? `${contentError.value} | No chapters.`\n        : 'No chapters.'\n    } else {\n      contentError.value = contentError.value\n        ? `${contentError.value} | No initial verses.`\n        : 'No initial verses.'\n    }\n  } catch (err) {\n    console.error('Error fetching book details/content:', err)\n    bookError.value = err.message || 'Failed to load book data.'\n    isLoadingContent.value = false\n  } finally {\n    isLoadingBook.value = false\n  }\n}\n\nconst fetchChapters = async (bookId) => {\n  contentError.value = null\n  chapters.value = []\n  selectedChapterId.value = null\n  verses.value = []\n\n  if (!bookId) return\n\n  try {\n    const { data, error } = await supabase\n      .from('chapters')\n      .select('chapter_id, chapter_number')\n      .eq('book_id', bookId)\n      .order('chapter_number')\n\n    if (error) throw error\n    chapters.value = data || []\n\n    const targetChapter =\n      chapters.value.find((ch) => ch.chapter_number === selectedChapterNumber.value) ||\n      chapters.value[0]\n    if (targetChapter) {\n      selectedChapterId.value = targetChapter.chapter_id\n      selectedChapterNumber.value = targetChapter.chapter_number\n    }\n  } catch (err) {\n    console.error('Error fetching chapters:', err)\n    contentError.value = err.message || 'Failed to load chapters.'\n    isLoadingContent.value = false\n  }\n}\n\nconst fetchVerses = async (chapterId, versionId) => {\n  isLoadingContent.value = true\n  contentError.value = null\n  verses.value = []\n\n  if (!chapterId || !versionId) {\n    contentError.value = 'Missing chapter or version ID.'\n    isLoadingContent.value = false\n    return\n  }\n\n  try {\n    const { data, error } = await supabase\n      .from('verses')\n      .select('verse_id, verse_number, verse_text')\n      .eq('chapter_id', chapterId)\n      .eq('version_id', versionId)\n      .order('verse_number')\n\n    if (error) throw error\n    verses.value = data || []\n  } catch (err) {\n    console.error('Error fetching verses:', err)\n    contentError.value = err.message || 'Failed to load verses.'\n  } finally {\n    isLoadingContent.value = false\n  }\n}\n\nconst handleVersionChange = () => {\n  if (selectedChapterId.value && selectedVersionId.value) {\n    fetchVerses(selectedChapterId.value, selectedVersionId.value)\n  }\n}\n\nconst changeChapter = (direction) => {\n  const currentIdx = chapters.value.findIndex((ch) => ch.chapter_id === selectedChapterId.value)\n  const newIdx = currentIdx + direction\n  if (newIdx >= 0 && newIdx < chapters.value.length) {\n    const newChapter = chapters.value[newIdx]\n    selectedChapterId.value = newChapter.chapter_id\n    selectedChapterNumber.value = newChapter.chapter_number\n    if (selectedVersionId.value) {\n      fetchVerses(selectedChapterId.value, selectedVersionId.value)\n    }\n  }\n}\n\nwatch(\n  () => props.bookSlug,\n  (newSlug) => {\n    if (newSlug) {\n      fetchBookDetailsAndInitialContent(newSlug)\n    } else {\n      bookError.value = 'Invalid Book identifier provided.'\n      isLoadingBook.value = false\n      isLoadingContent.value = false\n      bookTitle.value = ''\n      actualBookId.value = null\n      chapters.value = []\n      verses.value = []\n    }\n  },\n  { immediate: true },\n)\n</script>\n\n<style scoped>\n/* Keep existing styles */\n.book-detail {\n  padding: 1rem;\n}\nheader {\n  text-align: center;\n  margin-bottom: 1.5rem;\n  padding-bottom: 1rem;\n  border-bottom: 1px solid var(--border-color);\n}\nheader h1 {\n  color: var(--primary-color);\n  margin-bottom: 0.5rem;\n}\n.version-selector {\n  margin-top: 0.5rem;\n  font-size: 0.9em;\n}\n.chapter-nav {\n  text-align: center;\n  margin-bottom: 1.5rem;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 0 1rem;\n}\n.chapter-nav span {\n  font-weight: bold;\n}\nmain h2 {\n  text-align: center;\n  margin-bottom: 1rem;\n  font-weight: normal;\n  color: var(--text-secondary);\n}\n.verses-container {\n  margin-top: 1rem;\n  line-height: 1.8;\n}\n.verse {\n  margin-bottom: 0.75rem;\n  padding-left: 0.5rem;\n}\n.verse sup {\n  font-weight: bold;\n  margin-right: 0.5em;\n  color: var(--primary-color);\n  font-size: 0.8em;\n}\n.loading,\n.error-message {\n  text-align: center;\n  padding: 2rem;\n  margin-top: 1rem;\n}\n.error-message {\n  color: var(--error-color);\n}\n</style>\n",
    "HomeView.vue": "<template>\n  <div class=\"home-view container\">\n    <h1>Testaments de la Bible</h1>\n\n    <div v-if=\"isLoading\" class=\"loading-text\">Loading testament information...</div>\n    <div v-else-if=\"error\" class=\"error-box\">Error loading testaments: {{ error }}</div>\n\n    <section v-else-if=\"displayTestaments.length > 0\" class=\"testament-sections\">\n      <div\n        v-for=\"testament in displayTestaments\"\n        :key=\"testament.testament_id\"\n        class=\"testament-section card-link\"\n        @click=\"goToTestament(testament.slug)\"\n        role=\"link\"\n        tabindex=\"0\"\n        @keydown.enter=\"goToTestament(testament.slug)\"\n      >\n        <h2>{{ testament.name }}</h2>\n      </div>\n    </section>\n\n    <p v-else style=\"text-align: center; color: var(--text-secondary)\">\n      No testaments found in the database for the selected language.\n    </p>\n  </div>\n</template>\n\n<script setup>\nimport { ref, computed, onMounted } from 'vue'\nimport { useRouter } from 'vue-router'\nimport supabase from '../supabase'\n\nconst router = useRouter()\nconst rawTestamentTranslations = ref([])\nconst isLoading = ref(true)\nconst error = ref(null)\n\nconst getLanguageId = async (langName) => {\n  try {\n    const { data, error: langError } = await supabase\n      .from('languages')\n      .select('lang_id')\n      .eq('lang', langName)\n      .single()\n\n    if (langError) throw langError\n    if (!data) throw new Error(`Language '${langName}' not found in database.`)\n\n    return data.lang_id\n  } catch (err) {\n    console.error(`Error fetching language ID for ${langName}:`, err)\n    throw new Error(`Failed to find language ID for ${langName}. ${err.message}`)\n  }\n}\n\nconst fetchTestamentsData = async () => {\n  isLoading.value = true\n  error.value = null\n  rawTestamentTranslations.value = []\n\n  try {\n    const frenchLangId = await getLanguageId('Fran√ßais')\n\n    const { data: translationsData, error: fetchError } = await supabase\n      .from('testament_translations')\n      .select(\n        `\n        name,\n        slug,\n        testament_id,\n        testaments ( testament_id )\n      `,\n      )\n      .eq('lang_id', frenchLangId)\n      .order('testament_id')\n\n    if (fetchError) throw fetchError\n\n    rawTestamentTranslations.value = translationsData || []\n  } catch (err) {\n    console.error('Error fetching testaments data:', err)\n    error.value = err.message || 'Failed to load testament list.'\n  } finally {\n    isLoading.value = false\n  }\n}\n\nconst displayTestaments = computed(() => {\n  return rawTestamentTranslations.value\n    .map((item) => ({\n      testament_id: item.testament_id || item.testaments?.testament_id,\n      name: item.name,\n      slug: item.slug,\n    }))\n    .filter((item) => item.testament_id != null)\n})\n\nconst goToTestament = (slug) => {\n  if (!slug) {\n    console.error('Cannot navigate: slug is undefined')\n    error.value = 'Navigation error: Missing identifier for the selected testament.'\n    return\n  }\n  router.push({ name: 'testament-detail', params: { testamentSlug: slug } })\n}\n\nonMounted(() => {\n  fetchTestamentsData()\n})\n</script>\n\n<style scoped>\n.home-view {\n  padding: 2rem 1rem;\n}\n\n.testament-sections {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n  gap: 1.5rem;\n  margin-top: 2rem;\n}\n\n.testament-section {\n  border: 1px solid var(--border-color);\n  border-radius: var(--border-radius-medium);\n  padding: 1.5rem;\n  text-align: center;\n  background-color: var(--card-bg);\n  transition:\n    transform 0.2s ease-in-out,\n    box-shadow 0.2s ease-in-out;\n  cursor: pointer;\n}\n\n.testament-section:hover,\n.testament-section:focus {\n  transform: translateY(-3px);\n  box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);\n}\n\n.testament-section h2 {\n  margin: 0;\n  color: var(--primary-color);\n  font-size: 1.4rem;\n}\n\n.loading-text,\n.error-box {\n  text-align: center;\n  padding: 2rem;\n  margin-top: 2rem;\n}\n\n.error-box {\n  color: var(--error-color);\n  background-color: var(--error-bg);\n  border: 1px solid var(--error-color);\n  border-radius: var(--border-radius-medium);\n}\n</style>\n",
    "TestamentView.vue": "<template>\n  <div class=\"testament-view\">\n    <header v-if=\"isLoading\">\n      <h1>Loading Testament...</h1>\n    </header>\n    <header v-else-if=\"error\">\n      <h1 class=\"error-message\">Error: {{ error }}</h1>\n    </header>\n    <header v-else-if=\"testamentName\">\n      <h1>{{ testamentName }}</h1>\n    </header>\n    <header v-else>\n      <h1>Testament</h1>\n    </header>\n\n    <main>\n      <TestamentTypeList\n        v-if=\"actualTestamentId && testamentSlug\"\n        :testament-id=\"actualTestamentId\"\n        :testament-slug=\"testamentSlug\"\n      />\n      <p v-else-if=\"!isLoading && !error\">Could not load details for this testament.</p>\n    </main>\n  </div>\n</template>\n\n<script setup>\nimport { ref, watch, defineProps } from 'vue'\nimport supabase from '../supabase'\nimport TestamentTypeList from '../components/TestamentTypeList.vue'\n\nconst props = defineProps({\n  testamentSlug: {\n    type: String,\n    required: true,\n  },\n})\n\nconst testamentSlug = ref(props.testamentSlug)\nconst testamentName = ref('')\nconst actualTestamentId = ref(null)\nconst isLoading = ref(true)\nconst error = ref(null)\n\nconst getLanguageId = async (langName) => {\n  try {\n    const { data, error: langError } = await supabase\n      .from('languages')\n      .select('lang_id')\n      .eq('lang', langName)\n      .single()\n\n    if (langError) throw langError\n    if (!data) throw new Error(`Language '${langName}' not found in database.`)\n\n    return data.lang_id\n  } catch (err) {\n    console.error(`Error fetching language ID for ${langName}:`, err)\n    throw new Error(`Failed to find language ID for ${langName}. ${err.message}`)\n  }\n}\n\nconst fetchTestamentDetailsBySlug = async (slug) => {\n  if (!slug) {\n    error.value = 'No testament identifier provided.'\n    isLoading.value = false\n    return\n  }\n\n  isLoading.value = true\n  error.value = null\n  testamentName.value = ''\n  actualTestamentId.value = null\n\n  try {\n    const frenchLangId = await getLanguageId('Fran√ßais')\n\n    const { data, error: fetchError } = await supabase\n      .from('testament_translations')\n      .select('name, testament_id')\n      .eq('slug', slug)\n      .eq('lang_id', frenchLangId)\n      .single()\n\n    if (fetchError) {\n      if (fetchError.code === 'PGRST116') {\n        throw new Error(`Testament with slug '${slug}' not found for the selected language.`)\n      }\n      throw fetchError\n    }\n\n    if (data) {\n      testamentName.value = data.name\n      actualTestamentId.value = data.testament_id\n    } else {\n      throw new Error(`Testament with slug '${slug}' not found.`)\n    }\n  } catch (err) {\n    console.error('Error fetching testament details by slug:', err)\n    error.value = err.message || 'Failed to load testament details.'\n  } finally {\n    isLoading.value = false\n  }\n}\n\nwatch(\n  () => props.testamentSlug,\n  (newSlug) => {\n    testamentSlug.value = newSlug\n    fetchTestamentDetailsBySlug(newSlug)\n  },\n  { immediate: true },\n)\n</script>\n\n<style scoped>\n.testament-view {\n  padding: 1rem;\n}\nheader {\n  text-align: center;\n  margin-bottom: 2rem;\n  border-bottom: 1px solid var(--border-color);\n  padding-bottom: 1rem;\n}\nheader h1 {\n  color: var(--primary-color);\n}\n.error-message {\n  color: var(--error-color);\n}\nmain p {\n  text-align: center;\n  color: var(--text-secondary);\n  margin-top: 2rem;\n}\n</style>\n"
  }
}
